/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
//#define LED_OFF 0
//#define LED_ON 	1

#define FLAG_TRUE 	0xA5
#define FLAG_FALSE 	0x00
//#define CDS_POINT 	2000

#define FND_SEL3_GPIO_Port 	LED7_GPIO_Port
#define FND_SEL3_Pin		LED7_Pin
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
//int led_state = LED_OFF;
//uint8_t TxBuffer[1];
//uint8_t RxBuffer[1];
//uint8_t TxBuffer[] = "Hello world\n";
uint8_t Flag_CNT;
//uint8_t Flag_10ms;
uint32_t count;

uint8_t num[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x6F};

uint32_t curTick, preTick;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM2_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
void LCD_Display(int index, int number);
//void LCD_Clear (void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_TIM2_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
  HAL_TIM_Base_Start_IT(&htim2);
  HAL_ADCEx_Calibration_Start(&hadc1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

    /* USER CODE BEGIN 3 */
//		if(Flag_CNT == FLAG_TRUE)
//		{
//			Flag_CNT = FLAG_FALSE;
//			count++;
//
//			switch(count)
//			{
//				case 1:
//					LCD_Display(3, 1);
//					break;
//				case 2:
//					LCD_Display(2, 9);
//					break;
//				case 3:
//					LCD_Display(1, 4);
//					break;
//				case 4:
//					LCD_Display(0, 7);
//					break;
//			}
//
//			if(count == 4)
//			{
////				Flag_10ms = FLAG_TRUE;
//				count = 0;
//			}
//		}

//		if(Flag_10ms == FLAG_TRUE)
//		{
//			Flag_10ms = FLAG_FALSE;
//		}

//		curTick = HAL_GetTick();
//		if(((curTick-preTick)>=1000)&&((curTick-preTick)<2000))
//		{
//			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, SET);
//		}
//		else if((curTick-preTick)>=2000)
//		{
//			preTick = curTick;
//			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, RESET);
//		}


	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 71;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 999;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 500;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin
                          |FND_SEL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FND0_Pin|FND1_Pin|FND2_Pin|LED0_Pin
                          |LED1_Pin|LED2_Pin|LED3_Pin|FND3_Pin
                          |FND4_Pin|FND5_Pin|FND6_Pin|FND7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FND_SEL0_Pin|FND_SEL1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED4_Pin LED5_Pin LED6_Pin LED7_Pin
                           FND_SEL2_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin
                          |FND_SEL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : SW2_Pin */
  GPIO_InitStruct.Pin = SW2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SW2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : FND0_Pin FND1_Pin FND2_Pin LED0_Pin
                           LED1_Pin LED2_Pin LED3_Pin FND3_Pin
                           FND4_Pin FND5_Pin FND6_Pin FND7_Pin */
  GPIO_InitStruct.Pin = FND0_Pin|FND1_Pin|FND2_Pin|LED0_Pin
                          |LED1_Pin|LED2_Pin|LED3_Pin|FND3_Pin
                          |FND4_Pin|FND5_Pin|FND6_Pin|FND7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : FND_SEL0_Pin FND_SEL1_Pin */
  GPIO_InitStruct.Pin = FND_SEL0_Pin|FND_SEL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
//void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
//	if (GPIO_Pin == GPIO_PIN_2) {
//		if (led_state == LED_ON) {
//			led_state = LED_OFF;
//		} else {
//			led_state = LED_ON;
//		}
//	}
//}
//
//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
//{
//	if (RxBuffer[0] >= 'A' && RxBuffer[0] <= 'Z')
//	{
//		TxBuffer[0] = RxBuffer[0] + 'a' - 'A';
//		HAL_UART_Transmit(&huart2, TxBuffer, sizeof(TxBuffer), 1);
//	}
//	else if (RxBuffer[0] >= 'a' && RxBuffer[0] <= 'z')
//	{
//		TxBuffer[0] = RxBuffer[0] + 'A' - 'a';
//		HAL_UART_Transmit(&huart2, TxBuffer, sizeof(TxBuffer), 1);
//	}
//	HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	Flag_CNT=FLAG_TRUE;
}

void LCD_Display(int index, int number)
{
	int i;
	uint8_t digit=num[number];

	switch(index)
	{
		case 0:
			HAL_GPIO_WritePin(FND_SEL0_GPIO_Port, FND_SEL0_Pin, SET);
			HAL_GPIO_WritePin(FND_SEL1_GPIO_Port, FND_SEL1_Pin, RESET);
			HAL_GPIO_WritePin(FND_SEL2_GPIO_Port, FND_SEL2_Pin, RESET);
			HAL_GPIO_WritePin(FND_SEL3_GPIO_Port, FND_SEL3_Pin, RESET);
			break;
		case 1:
			HAL_GPIO_WritePin(FND_SEL1_GPIO_Port, FND_SEL1_Pin, SET);
			HAL_GPIO_WritePin(FND_SEL0_GPIO_Port, FND_SEL0_Pin, RESET);
			HAL_GPIO_WritePin(FND_SEL2_GPIO_Port, FND_SEL2_Pin, RESET);
			HAL_GPIO_WritePin(FND_SEL3_GPIO_Port, FND_SEL3_Pin, RESET);
			break;
		case 2:
			HAL_GPIO_WritePin(FND_SEL2_GPIO_Port, FND_SEL2_Pin, SET);
			HAL_GPIO_WritePin(FND_SEL0_GPIO_Port, FND_SEL0_Pin, RESET);
			HAL_GPIO_WritePin(FND_SEL1_GPIO_Port, FND_SEL1_Pin, RESET);
			HAL_GPIO_WritePin(FND_SEL3_GPIO_Port, FND_SEL3_Pin, RESET);

			break;
		case 3:
			HAL_GPIO_WritePin(FND_SEL3_GPIO_Port, FND_SEL3_Pin, SET);
			HAL_GPIO_WritePin(FND_SEL0_GPIO_Port, FND_SEL0_Pin, RESET);
			HAL_GPIO_WritePin(FND_SEL1_GPIO_Port, FND_SEL1_Pin, RESET);
			HAL_GPIO_WritePin(FND_SEL2_GPIO_Port, FND_SEL2_Pin, RESET);
			break;
	}

	for(i=0; i<7; i++)
	{
		if(digit & 0x01)
		{
			switch(i)
			{
				case 0:
					HAL_GPIO_WritePin(FND0_GPIO_Port, FND0_Pin, SET);
					break;
				case 1:
					HAL_GPIO_WritePin(FND1_GPIO_Port, FND1_Pin, SET);
					break;
				case 2:
					HAL_GPIO_WritePin(FND2_GPIO_Port, FND2_Pin, SET);
					break;
				case 3:
					HAL_GPIO_WritePin(FND3_GPIO_Port, FND3_Pin, SET);
					break;
				case 4:
					HAL_GPIO_WritePin(FND4_GPIO_Port, FND4_Pin, SET);
					break;
				case 5:
					HAL_GPIO_WritePin(FND5_GPIO_Port, FND5_Pin, SET);
					break;
				case 6:
					HAL_GPIO_WritePin(FND6_GPIO_Port, FND6_Pin, SET);
					break;
			}
		}
		else
		{
			switch(i)
			{
				case 0:
					HAL_GPIO_WritePin(FND0_GPIO_Port, FND0_Pin, RESET);
					break;
				case 1:
					HAL_GPIO_WritePin(FND1_GPIO_Port, FND1_Pin, RESET);
					break;
				case 2:
					HAL_GPIO_WritePin(FND2_GPIO_Port, FND2_Pin, RESET);
					break;
				case 3:
					HAL_GPIO_WritePin(FND3_GPIO_Port, FND3_Pin, RESET);
					break;
				case 4:
					HAL_GPIO_WritePin(FND4_GPIO_Port, FND4_Pin, RESET);
					break;
				case 5:
					HAL_GPIO_WritePin(FND5_GPIO_Port, FND5_Pin, RESET);
					break;
				case 6:
					HAL_GPIO_WritePin(FND6_GPIO_Port, FND6_Pin, RESET);
					break;
			}
		}
		digit = digit >> 1;
	}
}

//void LCD_Clear (void)
//{
////	HAL_GPIO_WritePin(FND0_GPIO_Port, FND0_Pin, RESET);
////	HAL_GPIO_WritePin(FND1_GPIO_Port, FND1_Pin, RESET);
////	HAL_GPIO_WritePin(FND2_GPIO_Port, FND2_Pin, RESET);
////	HAL_GPIO_WritePin(FND3_GPIO_Port, FND3_Pin, RESET);
////	HAL_GPIO_WritePin(FND4_GPIO_Port, FND4_Pin, RESET);
////	HAL_GPIO_WritePin(FND5_GPIO_Port, FND5_Pin, RESET);
////	HAL_GPIO_WritePin(FND6_GPIO_Port, FND6_Pin, RESET);
//
//	HAL_GPIO_WritePin(FND_SEL0_GPIO_Port, FND_SEL0_Pin, RESET);
//	HAL_GPIO_WritePin(FND_SEL1_GPIO_Port, FND_SEL1_Pin, RESET);
//	HAL_GPIO_WritePin(FND_SEL2_GPIO_Port, FND_SEL2_Pin, RESET);
//	HAL_GPIO_WritePin(FND_SEL3_GPIO_Port, FND_SEL3_Pin, RESET);
//}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
